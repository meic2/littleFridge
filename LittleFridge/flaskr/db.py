"""
This file implements the local database that store user's information of their fridge grocery
and their stored receipes.
The format of each grocery instance:
{
_id: object (defined by MongoDB
grocery_id: number (unique, autogenerate by code)
grocery_name: string,
spoon_id: number, (should autogenerate when user input their groceries)
category: string,
deadline: string (format in ISO 8601 dates),
size: string
}

The format of each recipe instance:
{
_id: object (defined by MongoDB
recipe_name: string
recipe_id: number, (should autogenerated by spoonAPI if in the database, else will auto_defined uniquely) - unique
extendedIngredients: list, (named from spoonAPI)
}
"""
from flask import abort

if __package__:
    from .extensions import mongo
else:
    from extensions import mongo

database = mongo.get_database('Fridge')
STATUS_NORMAL = 200
STATUS_NOTFOUND = 404
STATUS_UNKNOWN = 500
STATUS_BAD_REQUEST = 400
UPDATE_NORMAL_MESSAGE = "The file is successfully changed accordingly."
NOT_FOUND_MESSAGE = "No such grocery/recipe exist!"


def get_db(collection_name, food_id):
    """

    :param collection_name:
    :param food_id:
    :return:
    """
    assert collection_name in ["grocery", "recipe"]
    collection = database[collection_name]
    identifier = collection_name + "_id"
    food = collection.find_one({identifier: food_id}, {"_id": 0})
    if food is None:
        raise abort(STATUS_NOTFOUND, NOT_FOUND_MESSAGE)
    return food


def put_db(collection_name, instance):
    """
    create/insert new instance into the corresponding collection
    :param collection_name:
    :param instance
    :return:
    """
    assert collection_name in ["grocery", "recipe"]
    collection = database[collection_name]
    try:
        collection.insert_one(instance)
        return UPDATE_NORMAL_MESSAGE
    except Exception as e:
        abort(STATUS_UNKNOWN, str(e))


def delete_db(collection_name, food_id):
    assert collection_name in ["grocery", "recipe"]
    collection = database[collection_name]
    identifier = collection_name + "_id"
    deleted = collection.delete_many({identifier: food_id})
    return str(deleted.deleted_count) + " number of instances have been deleted"


def post_db(collection_name, food_id, params):
    '''
    single instance being updated
    :param collection_name:
    :param food_id:
    :param params:
    :return:
    '''
    assert collection_name in ["grocery", "recipe"]
    collection = database[collection_name]
    identifier = collection_name + "_id"
    food = collection.find_one({identifier: food_id})
    if food is None:
        raise abort(STATUS_NOTFOUND, NOT_FOUND_MESSAGE)
    collection.find_one_and_update({"name": food_id},
                                   {"$set": params}, upsert=True)

    return UPDATE_NORMAL_MESSAGE


def close_db(e=None):
    '''
    connect to the database
    :return: the database and the client
    '''
    return mongo.close()


if __name__ == "__main__":
    print(get_db("grocery", 123))
